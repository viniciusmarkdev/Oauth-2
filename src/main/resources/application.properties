#no exemplo atual onde temos um ou mais provedores de autenticação em memória, a preferência é configurar conforme foi apresentado na classe 
#Essa abordagem é considerada mais limpa e fácil de gerenciar.BasicSecurityConfig
#No entanto,  se houver a necessidade de 
#algo diferente, como armazenar os detalhes do registro do cliente em um banco de dados ou obtê-los de um serviço da web, 
#então seria necessário criar uma implementação personalizada de ClientRegistrationRepository. Nesse caso, seria preciso configurá-lo conformedefinido no application.properties.
#exercício :  propõe uma mudança na aplicação atual para armazenar os detalhes do servidor de autorização em um banco de dados. E
#essa mudança envolveria a criação de uma implementação personalizada de ClientRegistrationRepository que interage com o banco de dados para recuperar e armazenar os detalhes do cliente.
#escolha entre a configuração em memória e a criação de uma implementação personalizada depende dos requisitos específicos do aplicativo, sendo a abordagem 
#em memória mais simples e direta, enquanto a personalização é necessária para cenários mais complexos, como o armazenamento em um banco de dados.







#Outra forma de definir  Client-Registration and ClientRegistrationRepository
#spring.security.oauth2.clien.registration.github.client-id=a7553955a0c534ec5e6b
#spring.security.oauth2.client.registration.github.client-secret=1795b30b425ebb79e424afa51913f1c724da0dbb
#spring.security.oauth2.client.provider.myprovider.authorization-uri=<some uri>
#spring.security.oauth2.client.provider.myprovider.token-uri=<some uri>